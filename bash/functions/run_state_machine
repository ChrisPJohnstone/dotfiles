#!/usr/bin/env bash
function run_state_machine() {
    STATE_MACHINE=$(aws stepfunctions list-state-machines --query "stateMachines[?contains(name, \`$1\`)]" --output text | cut -f 3)
    COUNT=$(echo -n "${STATE_MACHINE}" | grep -c "^")
    if [[ "${COUNT}" == 0 ]]; then
        echo "No state machine found with name containing $1"
        return
    elif [[ "${COUNT}" -gt 1 ]]; then
        echo "Multiple state machines found with name containing $1"
        printf '%s\n' "${STATE_MACHINE}"
        return
    fi
    if [[ -z "${2}" ]]; then
        EXECUTION=$(aws stepfunctions start-execution --state-machine-arn "${STATE_MACHINE}" --output text | cut -f 1)
    else
        EXECUTION=$(aws stepfunctions start-execution --state-machine-arn "${STATE_MACHINE}" --input "${2}" --output text | cut -f 1)
    fi
    echo "STARTED ${EXECUTION}"
    while true; do
        EXECUTION_STATUS=$(aws stepfunctions describe-execution --execution-arn "${EXECUTION}" --query "status" --output text)
        echo "${EXECUTION_STATUS} ${EXECUTION}"
        if [[ "${EXECUTION_STATUS}" == "SUCCEEDED" ]]; then
            break
        elif [[ "${EXECUTION_STATUS}" == "FAILED" ]]; then
            aws stepfunctions describe-execution --execution-arn "${EXECUTION}" --query "{status:status,error:error,cause:cause}" --no-cli-pager | \
                jq '{status: .status, error: .error, cause: (.cause as $cause | try ($cause | fromjson) catch $cause)}'
            break
        fi
        sleep 5
    done
}

alias rsm=run_state_machine
