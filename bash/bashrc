# -------------------------- ENVIRONMENT VARIABLES --------------------------- #

# Command for opening a browser
if [[ "$(uname)" == "Linux" ]]; then
    export BROWSER='firefox'
elif [[ "$(uname)" == "Darwin" ]]; then
    export BROWSER='open -a firefox'
else
    echo "Unknown OS, please set BROWSER manually or update bashrc"
fi

# Editor for programs to default do (e.g. `git`) 
export EDITOR='nvim'

# Settings to pass to `less` (e.g. `git diff`, `man`)
export LESS='-RKiI --jump-target .5'

# --------------------------- FUNCTIONS & ALIASES ---------------------------- #

# Add colours to `ls` and `grep`
alias ls='ls --color=auto'
alias grep='grep --color=auto'

# Calls a custom script in this repo
alias tcd='${HOME}/.config/tmux/scripts/start_tmux_session'

# Determine git branch at pwd
function parse_git_branch() {
    git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/ [\1]/p'
}

# Determine name of virtual environment if relevant
function parse_virtual_env() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        echo " [${VIRTUAL_ENV##*/}]"
    fi
}

# Grep with a bunch of dirs I usually have to ignore
alias safegrep='grep \
    --exclude-dir ".idea" \
    --exclude-dir ".git" \
    --exclude-dir ".serverless" \
    --exclude-dir ".venv" \
    --exclude-dir "__pycache__" \
    --exclude-dir "cdk.out" \
    --exclude-dir "node_modules" \
    --exclude-dir "python_modules" \
    --exclude-dir "venv" \
'

# Finds a state machine whose name contains $1 and follows it's execution
function rsm() {
    STATE_MACHINE=$(aws stepfunctions list-state-machines --query "stateMachines[?contains(name, \`$1\`)]" --output text | cut -f 3)
    COUNT=$(echo -n "${STATE_MACHINE}" | grep -c "^")
    if [[ "${COUNT}" == 0 ]]; then
        echo "No state machine found with name containing $1"
        return
    elif [[ "${COUNT}" -gt 1 ]]; then
        echo "Multiple state machines found with name containing $1"
        printf '%s\n' "${STATE_MACHINE}"
        return
    fi
    EXECUTION=$(aws stepfunctions start-execution --state-machine-arn "${STATE_MACHINE}" --output text | cut -f 1)
    while true; do
        execution_status=$(aws stepfunctions describe-execution --execution-arn "${EXECUTION}" --query "status" --output text)
        if [[ $execution_status == "SUCCEEDED" ]]; then
            echo "Execution ${EXECUTION} succeeded"
            break
        elif [[ $execution_status == "FAILED" ]]; then
            echo "Execution ${EXECUTION} failed"
            break
        fi
        echo "Execution is $execution_status"
        sleep 5
    done
}

function ticket() {
    if [[ -z "$1" ]]; then
        echo "Usage: ticket <ticket-number>"
        return 1
    fi
    URL="https://keyloop.atlassian.net/browse/MDATA-$1"
    ${BROWSER} "${URL}" &> /dev/null
}

# ------------------------------ SHELL SETTINGS ------------------------------ #
# For future me when half this stuff doesn't exist on the internet: `man bash`

# Customise prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1
PS1="\[$(tput rev)\]"
PS1+="[\W]"
PS1+="\$(parse_git_branch)"
PS1+="\$(parse_virtual_env)"
PS1+="\[$(tput sgr0)\] "

# History settings
shopt -s histappend
HISTCONTROL=ignoredups
HISTSIZE=10000
HISTFILE=$HOME/.histfile
HISTIGNORE='ls:cd:fg:clear:exit'

# Color the common prefix when listing completions
bind 'set colored-completion-prefix on'

# Ignore case for tab completion
bind 'set completion-ignore-case on'

# Change up/down behaviour to go through history *based on what is already in the line*
bind -m vi-command 'k: history-search-backward'
bind -m vi-command 'j: history-search-forward'
bind -m vi-command '"\e[A": history-search-backward'
bind -m vi-command '"\e[B": history-search-forward'
bind -m vi-insert '"\e[B": history-search-forward'
bind -m vi-insert '"\e[B": history-search-forward'

# Enable ** for recursive glob
shopt -s globstar
shopt -s dotglob

# Enable vi like editing on the command line
set -o vi

# Bind clear screen to Ctrl + L
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

# Resize the shell to fit the window after actions
shopt -s checkwinsize

# ------------------------------- COMPLETIONS -------------------------------- #
# COMP_WORDS is the line as an array
# COMP_CWORD is the index of the word to complete
# COMP_REPLY is the array of completions

function completion_cdk() {
    COMPREPLY=()
    declare -a COMMANDS=(
        "ls"
        "synth"
        "deploy"
        "acknowledge"
    )

    if [[ ${COMP_CWORD} -eq 1 ]]; then
        COMPREPLY=($(compgen -W "${COMMANDS[*]}" -- "${COMP_WORDS[1]}"))
        return
    fi

    local COMMAND="${COMP_WORDS[1]}"
    if [[ ${COMMAND} == "deploy" ]] || [[ ${COMMAND} == "destroy" ]]; then
        [ -d "cdk.out" ] && COMPREPLY=($(ls cdk.out/${COMP_WORDS[COMP_CWORD]}*.template.json 2> /dev/null | sed 's/cdk.out\/\(.*\)\.template\.json/\1/'))
        return
    fi
}

complete -F completion_cdk cdk
